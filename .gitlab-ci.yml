stages:
  - analysis
  - test
  - deploy

lint-python:
  stage: analysis
  image: python:3.7
  before_script:
    - cd shopstop_backend
    - pip install -r requirements.txt
  script:
    - flake8 shopstop
    - isort -rc -c shopstop/

test-django:
  stage: test
  image: python:3.7
  before_script:
    - cd shopstop_backend
    - pip install -r requirements.txt
  script:
    - coverage run --source="shopstop" manage.py test
    - coverage report

ESLint:
  stage: analysis
  image: node:alpine
  before_script:
    - cd shopstop-frontend
    - apk add --no-cache git
    - yarn
  script:
    - yarn lint

test-jest:
  stage: test
  image: node:alpine
  before_script:
    - cd shopstop-frontend
    - apk add --no-cache git
    - yarn
  script:
    - yarn test --passWithNoTests

build_staging_image:
  stage: deploy
  image: alpine
  before_script:
    - apk --update add rsync
    - apk --update add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - rsync -a ./ ubuntu@shopstop.xyz:~/staging
    - ssh ubuntu@shopstop.xyz "cd staging; docker build -t registry.shopstop.xyz/shopstop-backend:staging" .
    - ssh ubuntu@shopstop.xyz docker push registry.shopstop.xyz/shopstop-backend:staging
  only:
    - develop
  
build_production_image:
  stage: deploy
  image: alpine
  before_script:
    - apk --update add rsync
    - apk --update add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - rsync -a ./ ubuntu@shopstop.xyz:~/production
    - ssh ubuntu@shopstop.xyz "cd production; docker build -t registry.shopstop.xyz/shopstop-backend:production ."
    - ssh ubuntu@shopstop.xyz docker push registry.shopstop.xyz/shopstop-backend:production
  only:
    - master

deploy_staging:
  stage: deploy
  image: alpine
  before_script:
    - apk --update add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh ubuntu@shopstop.xyz "cd staging; ENVIRONMENT=staging docker-compose stop"
    - ssh ubuntu@shopstop.xyz "cd staging; ENVIRONMENT=staging docker-compose rm -f"
    - ssh ubuntu@shopstop.xyz "cd staging; ENVIRONMENT=staging docker-compose pull"
    - ssh ubuntu@shopstop.xyz "cd staging; ENVIRONMENT=staging SHOPSTOP_SECRET_KEY=$SHOPSTOP_STAGING_SECRET_KEY DJANGO_SETTINGS_MODULE=shopstop_backend.settings-staging docker-compose up -d"
  environment:
    name: staging
    url: https://staging.shopstop.xyz
  only:
  - develop

deploy_production:
  stage: deploy
  image: alpine
  before_script:
    - apk --update add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh ubuntu@shopstop.xyz "cd production; ENVIRONMENT=production docker-compose stop"
    - ssh ubuntu@shopstop.xyz "cd production; ENVIRONMENT=production docker-compose rm -f"
    - ssh ubuntu@shopstop.xyz "cd production; ENVIRONMENT=production docker-compose pull"
    - ssh ubuntu@shopstop.xyz "cd production; ENVIRONMENT=production SHOPSTOP_SECRET_KEY=$SHOPSTOP_PRODUCTION_SECRET_KEY DJANGO_SETTINGS_MODULE=shopstop_backend.settings-production docker-compose up -d"
  environment:
    name: production
    url: https://shopstop.xyz
  only:
  - master